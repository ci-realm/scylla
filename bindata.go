// Code generated by go-bindata.
// sources:
// templates/builds.html
// templates/builds_project.html
// templates/builds_project_id.html
// templates/faq.html
// templates/index.html
// templates/layout.html
// templates/projects.html
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBuildsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x30\xb4\x73\x2a\xcd\xcc\x49\x29\xb6\xd1\xcf\x30\xb4\xe3\x02\x04\x00\x00\xff\xff\x4f\x23\xdb\xfb\x10\x00\x00\x00")

func templatesBuildsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBuildsHtml,
		"templates/builds.html",
	)
}

func templatesBuildsHtml() (*asset, error) {
	bytes, err := templatesBuildsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/builds.html", size: 16, mode: os.FileMode(420), modTime: time.Unix(1532085713, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBuilds_projectHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x3d\x0e\xc2\x30\x14\x03\xe0\x3d\xa7\xb0\x7a\x80\x3c\xa9\xf3\x23\x03\x62\x61\x41\x5c\x21\x90\x57\x52\x04\xad\x14\x7e\x96\x27\xdf\x1d\xb5\x74\xb3\x65\x7f\x5a\xfb\xb4\xff\x8c\x8f\xf2\xc2\x30\x37\xb8\xc7\x53\x7e\x1a\xa9\x52\xfb\x14\xdc\x5b\x9e\x6e\x86\xf8\xbf\x90\x01\xd0\x32\x7e\x53\x00\x00\xcd\xa8\xcd\x86\x5d\x27\x97\x75\x16\xf7\x78\x6e\xf3\xdd\xae\x6f\x72\x29\xc7\x03\xd9\xa5\x2d\xa8\xe4\x85\xa9\xac\xde\xdd\xa6\x42\x86\x5f\x00\x00\x00\xff\xff\xc6\x08\xb3\x70\x80\x00\x00\x00")

func templatesBuilds_projectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBuilds_projectHtml,
		"templates/builds_project.html",
	)
}

func templatesBuilds_projectHtml() (*asset, error) {
	bytes, err := templatesBuilds_projectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/builds_project.html", size: 128, mode: os.FileMode(420), modTime: time.Unix(1532127308, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesBuilds_project_idHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xcd\x4a\x04\x31\x10\x84\xef\xf3\x14\x61\xee\x66\x60\xf7\x1a\x73\x10\x94\xc5\xc3\xb2\xcc\x3e\x41\x9c\x34\x26\xd8\x4e\x8f\x9d\x64\x51\x42\xbf\xbb\x64\xd6\x1f\xe6\xe0\xcd\x63\xaa\x3e\xaa\xd2\x65\xc2\xce\xde\x95\x88\x5e\xd5\xaa\x1f\xe9\x49\x1f\x88\x5e\xf4\x08\x0b\xa5\x98\x89\x3f\xf4\x43\x41\x3c\xba\x57\x10\x51\x23\x5c\x62\x8a\x34\x6f\xd0\x53\x41\x1c\xe1\xad\x40\xca\xfa\x00\xce\xeb\x73\x70\x22\x66\x08\x3b\xdb\xd5\xca\x6e\x7e\x06\xa5\x47\x48\x05\x73\x12\xe9\x8c\x8f\x17\xdb\x29\x65\xc2\xde\x9e\x5c\x0e\x66\x08\xfb\xf6\xae\x55\x1f\xe3\x7b\x53\x44\xbe\xec\x73\xf6\x54\xf2\x37\x60\x16\x06\x35\xa1\x4b\xe9\xb6\x9f\x68\x4e\x84\x70\x43\x25\x2f\x25\xf7\xcd\x56\xca\x4c\xe4\x7f\x88\x14\x00\xb1\xb7\xd7\xd4\x6b\x50\xfb\x54\x43\xd6\xb0\x61\x61\xb0\xbf\x3d\xc0\xfc\x3f\x3d\xc0\xfc\x67\xcf\x3d\x33\xf1\xf6\xde\x55\x6a\xab\x0c\xeb\x2c\xb5\xc2\xec\x45\xba\xcf\x00\x00\x00\xff\xff\xd7\x90\xf6\xdd\x95\x01\x00\x00")

func templatesBuilds_project_idHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBuilds_project_idHtml,
		"templates/builds_project_id.html",
	)
}

func templatesBuilds_project_idHtml() (*asset, error) {
	bytes, err := templatesBuilds_project_idHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/builds_project_id.html", size: 405, mode: os.FileMode(420), modTime: time.Unix(1532131173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFaqHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x30\xb4\x73\x73\x0c\x54\xa8\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xb5\xd1\xcf\x30\xb4\xe3\x02\x04\x00\x00\xff\xff\xcc\x8f\x9b\xcb\x17\x00\x00\x00")

func templatesFaqHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFaqHtml,
		"templates/faq.html",
	)
}

func templatesFaqHtml() (*asset, error) {
	bytes, err := templatesFaqHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/faq.html", size: 23, mode: os.FileMode(420), modTime: time.Unix(1532085713, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\xef\x6e\x1b\xc9\x0d\xff\xbe\x4f\xc1\x0a\xf9\x10\x03\xb6\x36\xf1\x25\xc1\x45\x91\xd5\x3a\x8e\xcf\x67\x34\x48\x52\x5b\x69\xd1\x4f\x87\xd9\x5d\x6a\x77\xa2\xd1\xcc\x76\xc8\xd1\x1f\x04\x06\xee\x35\xee\xf5\xee\x49\x0a\xce\xec\xae\xe4\x44\x41\xd1\x6f\xd2\x2c\x87\xf3\x23\x7f\xe4\x8f\x9c\x36\xcf\x67\x1f\xf4\x16\x7e\x31\x6a\xed\x82\xc7\x0a\xae\x9c\x65\x6d\x83\x0b\x04\xb7\x96\xb1\xf6\x8a\xb5\xb3\xd3\xbc\x79\x3e\xcb\xb2\x69\x3b\xbb\x2f\x77\xc6\x28\xd0\x04\x0a\x48\xaf\x5a\x83\x70\x75\x0b\x84\x7e\x8d\x1e\xb8\x51\x0c\xe4\xcc\x1a\x09\x9c\x45\xe0\x46\xdb\x7a\x92\x5d\xaf\x95\x09\x8a\x11\xa6\x0a\x1a\x8f\x8b\x8b\x51\xc3\xdc\xd2\x24\xcf\xad\xde\x3a\x1a\x3b\x5f\xcb\xaf\x7c\x24\x58\xa6\xb9\x9a\x41\x85\x5e\xaf\xe3\xcb\x04\xca\x56\xa0\xed\xc2\xf9\x15\xec\x5c\x88\x7f\x6f\x34\xff\x1a\x8a\x4c\x15\x2e\x30\x70\x83\xe0\x91\x82\x61\x1a\x4f\xf3\xf6\x5b\x98\x11\xe3\x0a\x2d\x63\x05\x1b\xaf\x99\xd1\x82\xb6\x70\xe5\x77\xc4\xca\x9c\x42\x20\x24\xf8\xe4\x88\x6b\x8f\xf7\xff\x78\x0f\xec\x80\xd8\x79\x04\xe3\x6a\x3a\xcd\x56\xc8\xaa\x52\xac\x4e\xe3\xc3\xb8\xc5\x32\x08\x2c\x20\x56\x1c\x28\x9d\x4a\x06\x17\xce\x43\x11\xb4\xa9\xb4\xad\xf7\x30\x6e\x81\xfd\x4e\x5c\x2e\x11\xdb\x88\x74\xe5\xd6\xda\xd6\xd0\x2a\xcf\x04\x8a\xc0\xa3\xd1\xaa\x30\x28\xbf\x5b\x47\xa4\x0b\x83\xa7\x40\xda\x96\x08\x2a\x06\x97\xa1\xad\xc0\x2d\xe2\xed\x4a\xed\x4e\x41\x19\x03\x1b\x84\x52\x79\x84\x94\x02\x4d\x29\xf5\x9a\x61\xe3\xfc\x72\xc8\x43\x73\x3e\xfb\x97\x9c\x77\xd9\xb8\x52\x16\xde\x39\xf8\xc5\x79\xf8\xb7\x0b\xd3\xbc\x39\x17\xa3\x60\x66\xd9\xd4\xe8\xd9\x95\x47\xe1\xa8\xd0\x56\x79\x8d\x34\xcd\x8d\x4e\x1f\xee\x82\x05\x46\xe2\x83\xa3\x4f\xae\x0d\x46\xac\x77\x2e\xf8\x18\x7f\xa9\xca\x06\x0f\x0c\x02\x35\x12\xf7\x77\x8c\x8b\x9d\xde\x46\xca\x47\xb3\xab\xf8\x47\x18\xdf\xdf\xfc\xdc\x56\x83\xe3\xc4\x33\x7c\xba\xeb\xd2\xbd\xb7\xba\x97\x82\x8b\x14\x49\x6a\xa2\x71\xeb\xdd\x17\x2c\x39\xb1\xd0\x9b\xe6\x12\x5d\xca\xc4\x0d\x32\x4b\xea\xef\x59\x79\xc6\xaa\x0f\xdf\x75\xe1\x4f\x5b\xb1\x00\x65\xe1\xe3\x65\x60\x01\xbf\x44\x3b\x10\xf9\x41\xad\x75\x2d\xb8\x8e\xc5\x54\x6b\x6e\x42\x31\x2e\xdd\x2a\xa7\xf4\x08\xe5\xf1\x3a\x8d\x66\xff\xdb\x46\xc2\xcf\xa4\x8c\x6a\xb4\xe8\xe5\x0d\x05\x16\x37\x87\x30\xc6\x70\xcb\xe0\xac\xd9\x81\x45\xac\x28\x96\xc2\xb4\x74\x15\xce\x3c\xb6\x6e\xd2\x27\x27\x9e\x40\x8b\x7e\xa5\x89\xb4\xb3\xb1\x0c\xf6\x39\x9b\xb6\xb3\xcb\xaa\x8a\x97\x37\x58\x34\xce\x2d\x87\xf0\x6e\x5c\x0c\x2c\x3a\x38\x82\xf8\x89\xdb\x58\xf4\xf9\x13\x79\x6d\x0f\x5f\x3c\x0c\xaf\x3e\xa5\x50\x10\x6b\x0e\x3d\x77\xc9\x59\xbc\xd8\xd9\xe4\x7b\xc8\xfd\x2d\x6d\x23\x9c\xcf\x77\xef\x4f\xf6\x4d\x23\x20\x55\x0f\x31\x15\x76\xeb\xb4\x65\x12\x8c\xd1\x77\x92\x9b\x53\x30\x7a\x89\xdf\xa0\x7e\xd2\x38\xe2\x0e\xfb\xd9\x10\xe6\xf7\x18\xbb\x5b\x8e\xb8\xff\xda\xa0\x8f\xf4\x0a\x20\xe3\xca\xa8\x3e\x43\x71\xf5\x2f\x8a\x02\x95\xca\x82\x32\xe4\x44\x3a\x80\xdc\x0a\xa3\xcc\x75\x60\x0e\x6b\x43\x04\xae\xf6\x6e\x19\x73\x38\x9a\xc5\xdf\x51\xde\x44\x2c\xd8\xef\xe4\x96\x66\x70\x81\x4f\xc6\xd3\xc2\xcf\xb2\x79\x83\xe2\xb2\x4b\x30\x48\x83\x7b\xfc\x4f\xd0\x1e\xab\x49\x97\x9e\xa1\x5b\x9d\x65\xb4\x0c\xbc\x6b\x71\xd2\x45\xa3\xda\xd6\xe8\x04\x3c\xff\x42\xa2\xda\xf1\xf8\xb0\x6b\x4a\x8f\x3c\x81\xa7\xca\xee\x12\x68\x89\x67\xa3\x2c\x9f\xec\x8d\xae\x6d\xd2\x23\x06\x83\x8a\xf8\xa0\xd8\xda\x60\x4c\x04\x84\xfb\xac\xe1\x1a\x2d\x8f\x61\x9e\x44\x98\x61\xa3\x8d\xe9\x84\x0b\x56\x6e\x85\x2b\x86\x02\xd3\xa4\xd8\x81\xae\xad\xf3\x58\x8d\x0f\x9b\xf3\x51\x7d\x5e\x39\xbb\xd0\x75\x10\x22\x1a\xec\x92\x3e\xd4\x45\xff\x31\x31\xa3\x09\x2a\x99\x31\x6b\xad\xe0\xda\xae\xb5\x77\x56\x54\x1e\xd6\xca\x47\x41\xa5\xb1\x88\x5c\x6c\x98\xa8\xe9\x98\x30\x2d\x9c\x31\x6e\x23\x63\xe9\x9b\x84\xa6\x10\x6f\x6e\xe7\xbf\x7e\x7e\xfb\xdb\xfc\xe3\xdf\xaf\x3f\x74\x21\x4e\x62\x70\xb1\x0f\x13\xfd\x51\x27\xab\xbe\x76\x17\xda\x13\x03\x31\xb6\x07\x91\xc4\x8b\xef\x2e\xe7\x97\x6f\x2f\xef\xaf\x7f\xfb\x7c\xf7\x7e\xf0\x75\x69\xa5\xda\x0f\x2b\xb7\x4d\xb3\x47\x8a\x37\x10\xfa\x49\xab\x88\xfe\x16\xab\xb8\x2a\xac\x5a\xe1\x77\x2c\xa6\x6b\xf7\xd7\x77\xff\xbc\xbe\x7b\xe4\x7b\x9e\x5a\x29\x75\x8b\xb0\xcb\x0e\x36\xb1\xac\x05\x77\x85\xad\x71\x3b\x4c\x02\x70\x50\x2a\xa7\xd9\x91\x36\xa2\x38\x31\xc6\xde\x95\x4b\xca\x87\xfe\x79\xe7\xec\x9f\xbf\xff\xc1\x52\xbf\x75\x97\x4f\xf6\x4a\x1b\x79\x8b\x8c\xa2\xe6\x2f\x27\x3f\xa4\xf6\x6d\x37\x1c\x8f\x30\xeb\x31\xc5\x04\xa5\x51\x44\x17\x23\x6a\xd0\x98\xd1\xcc\xea\x6d\x12\x73\x38\x5b\xc0\x78\x48\x43\x34\x3f\xf4\x7c\x17\xac\xfd\xbf\x1c\x8f\xf3\xb4\x2f\xe4\x85\xb6\x5d\xa4\x3f\xf6\x9e\xd4\x28\x65\xa7\xd4\x63\x2b\xf3\x2a\xa5\x63\xa1\xcd\x20\x18\xfd\xf0\xe9\xfb\x49\xce\x45\x1e\x64\x22\x6b\x6e\xf6\xe2\x36\x3f\xac\x41\x29\xe2\x2f\x81\xe2\xd4\xc1\xad\x8a\xdb\x54\x37\xe9\x89\x7d\x28\x39\x78\x14\xed\xff\xf3\xf7\x3f\x48\x4e\x9c\xad\xcd\x0e\x3c\x96\x6e\xb5\x42\x5b\x61\x95\x45\x75\x94\x47\xe5\x31\x05\xad\xb6\x16\x2b\x58\xa3\xa7\x4e\xbd\x12\x70\xab\xb7\xed\xb2\x1e\xc4\x9a\x1c\x14\x8e\x9b\x7e\x2f\x90\xe1\x13\x57\x2b\x8f\x99\x2a\x39\x28\x63\x76\xc3\x32\x03\xba\x42\xcb\xba\x54\x26\xad\x73\xfb\x25\xeb\xdb\xec\x5a\xbd\x1d\xcd\xbe\x42\xf7\x16\xfc\x55\x56\x2f\xe7\x19\x9e\x2e\x90\xcb\xe6\x46\x33\x7c\xcd\x00\x82\x37\x70\x01\x47\x86\xcc\x07\xbd\xfd\x78\x9f\x77\xb7\xdf\x64\x00\x1e\x17\x70\x01\xa3\xf3\x17\x2f\xce\x5f\x57\xaf\x5e\xa9\x9f\x16\xea\xc5\xb3\x52\xbd\xfe\xb9\x78\xf9\xac\x54\xd5\xb3\xf2\xf5\xf3\x97\x3f\xe1\xcf\xcf\x16\x2f\x5f\x95\x2f\xd4\xf9\xe8\x4d\xf6\x70\x02\x5f\x1f\xe0\x61\x12\x1f\x52\x6d\x7b\x16\x97\x99\x1d\x5c\x40\xa9\x8c\xf9\xa4\xca\xa5\xaa\x11\xc6\xf9\x18\xbe\x3e\xbc\xe9\x4c\xe2\x66\x03\x17\x92\xd5\xe0\x09\x6f\x2d\xbb\x4b\x66\x4f\xd1\x07\x7c\x7f\x11\xc8\xb8\xcd\xbc\xbb\xc4\x3e\xe0\x1b\x88\xbe\x8e\x99\x2e\x14\xf1\x11\xd3\x87\xec\x21\x7b\x54\x70\x69\xec\x45\xe1\xf4\xba\x08\x8c\xd4\xab\x8b\x47\x0e\x5e\x28\x55\x82\x09\x3b\x7d\x2d\x10\xb0\xdb\xa9\xab\xd3\x64\xaa\x09\x4a\x45\x98\x0d\x93\xa0\x8b\xbd\xa7\x5c\x38\xde\x7f\xeb\xd6\xb9\xf8\x7f\x9c\x1d\xee\x88\x03\xff\x95\x13\x14\x71\xe6\x76\xea\x2d\xf1\xed\xeb\xe9\x2c\x16\x48\xef\xde\xd9\xc3\xa9\xff\xb8\x4f\x94\xad\xb2\xb4\x52\x1f\x5f\xd5\xdd\x30\x55\x57\x6a\x89\x40\xbd\xfc\x1f\xf3\xa5\x29\x6e\xb8\x52\x97\x85\x60\x4c\x7d\x9f\x7a\xc0\x13\x9a\x45\xa7\xc7\x32\xc0\x8d\xd9\x3d\xee\xbb\x7e\xff\x78\x4c\xf4\xd0\xce\xc1\x96\x71\xb2\x08\x92\x02\xa5\xa3\xe2\xe4\x88\xa3\x3e\xe9\x90\x45\xe2\x3d\x17\x34\xce\x3e\x72\x83\x7e\xa3\x09\xd3\x76\xd6\xbb\x18\xe8\x63\xd7\x9e\x19\x5c\xa3\x19\x78\x13\x47\x7c\xb8\x98\xe5\xb2\x80\xfe\x37\x00\x00\xff\xff\xba\x23\xb8\x68\x88\x0d\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 3464, mode: os.FileMode(420), modTime: time.Unix(1532085713, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xcf\x6e\xd4\x30\x10\xc6\xef\x3c\xc5\xe0\x03\x82\xc3\xc6\x2c\xa7\x8a\x3a\x96\xa0\x50\x15\x09\xa9\x45\x94\x03\x47\xc7\xf1\xda\xb3\x75\xec\x60\x4f\x96\x46\x55\xdf\x1d\xe5\xdf\x92\x82\xaa\xf6\x34\x8e\xe7\xf7\x8d\xbf\xcc\xd8\xe2\xe5\xa7\xcb\xb3\xeb\x9f\x57\x9f\xc1\x51\xe3\xe5\x0b\x31\x05\x00\xe1\x8c\xaa\x87\x05\x80\x68\x0c\x29\xd0\x4e\xa5\x6c\xa8\x64\x3f\xae\xcf\x37\x27\x6c\x4e\x11\x92\x37\xf2\xbb\xee\xbd\x57\x70\x16\x03\x61\xe8\x62\x97\xe1\x4b\x20\x63\x93\x22\x8c\x41\xf0\x09\x9a\x04\x1e\xc3\x0d\x24\xe3\x4b\x96\xa9\xf7\x26\x3b\x63\x88\x81\x4b\x66\x57\x32\xae\x73\xe6\x8d\xc2\x50\xe8\x9c\xd9\x73\x05\x0e\xad\xf3\x68\x1d\x6d\x26\x80\x5b\x24\xd7\x55\x1b\x8b\x99\xd6\x85\xb2\x4e\xd8\x12\xe4\xa4\x4b\xc6\xf7\x2b\x5d\xd1\x2a\x7d\x53\xec\x33\x93\x82\x4f\xd0\x03\x85\x74\x7e\x9f\x0b\x0c\x48\x17\x8b\x02\x83\xbd\x0c\x5f\xa3\xaa\x5f\xbf\x39\x5d\x6b\x04\x5f\xba\x26\xaa\x58\xf7\x73\x99\x61\xcf\xa4\xe9\x03\x40\xa8\xc5\x3c\x5b\xb6\x00\x04\x36\x76\x76\x86\x8d\xe5\x79\xec\x67\x91\x0f\x76\xcd\xb8\xed\xdc\x68\xc1\xdd\xf6\x58\x8e\xab\xf9\x18\xbe\x3e\x47\x04\x75\x38\x22\x9d\x5f\x55\xf1\x28\xd7\x16\x2e\x62\x63\x86\x1a\x82\x7b\x7c\x8c\xda\xa9\x5f\x4c\x9e\x7f\xf8\xf6\x14\xd7\xa6\xb8\x37\x9a\x32\x93\x57\xf3\xea\x29\x45\xd5\xa1\xaf\x33\x93\x1f\xc7\xf8\x2f\x2d\xf8\xe2\x5c\xf0\xe3\xff\x08\x95\x08\xf5\x72\x9f\x00\xee\xee\x7a\x34\xbe\xbe\xbf\x9f\xc1\x07\x69\xb1\x8b\x91\x56\xbd\xcf\xad\x0a\xa0\xbd\xca\xb9\x64\x3a\xb6\x3d\x93\xaf\x86\x70\x0a\xef\xde\x6e\x4f\xa0\xea\xa1\x51\xe1\x60\x52\x27\xf8\x40\xfe\x37\x32\x47\xd4\xe6\xf7\x7c\xb4\x4d\xbf\x91\x5c\xc0\xdb\x22\x26\xcb\xe4\x38\x40\xe5\xa9\x64\x63\x0e\x86\x24\x04\xbc\x65\xd3\x54\x1f\x13\xf2\x4a\xd5\xd6\x8c\x83\xe6\x72\x35\xca\xbf\xb6\x05\x9f\x6e\x92\xe0\xd3\xcb\xfc\x13\x00\x00\xff\xff\x90\xf5\x88\xeb\xb1\x03\x00\x00")

func templatesLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutHtml,
		"templates/layout.html",
	)
}

func templatesLayoutHtml() (*asset, error) {
	bytes, err := templatesLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layout.html", size: 945, mode: os.FileMode(420), modTime: time.Unix(1532085713, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesProjectsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\x3d\x0a\xc2\x40\x10\x05\xe0\x3e\xa7\x58\xd2\xbb\x0b\xa9\xc7\x29\xb4\x15\xf1\x0a\xa3\x19\xdd\xf8\x33\x81\x4d\x52\x3d\xde\xdd\xc5\xc2\xf6\xe3\x93\x3a\xe8\xa5\xcd\x4f\xbf\xad\x8b\x94\x3a\x68\x07\x34\x8b\x87\xa7\xfc\x67\x52\x2c\xd5\xe6\xf7\x7d\x5f\xae\xdb\xf4\x1e\x97\x02\xe4\xd3\x14\x2f\xb2\x57\x20\x9f\xed\xe3\x64\xda\x25\x20\x1f\x7e\xe1\x38\x6f\xb1\x92\x52\x4c\x01\x8f\x91\xec\xbe\x01\x00\x00\xff\xff\xf5\x5e\x0f\x4f\x68\x00\x00\x00")

func templatesProjectsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesProjectsHtml,
		"templates/projects.html",
	)
}

func templatesProjectsHtml() (*asset, error) {
	bytes, err := templatesProjectsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/projects.html", size: 104, mode: os.FileMode(420), modTime: time.Unix(1532126802, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/builds.html": templatesBuildsHtml,
	"templates/builds_project.html": templatesBuilds_projectHtml,
	"templates/builds_project_id.html": templatesBuilds_project_idHtml,
	"templates/faq.html": templatesFaqHtml,
	"templates/index.html": templatesIndexHtml,
	"templates/layout.html": templatesLayoutHtml,
	"templates/projects.html": templatesProjectsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"builds.html": &bintree{templatesBuildsHtml, map[string]*bintree{}},
		"builds_project.html": &bintree{templatesBuilds_projectHtml, map[string]*bintree{}},
		"builds_project_id.html": &bintree{templatesBuilds_project_idHtml, map[string]*bintree{}},
		"faq.html": &bintree{templatesFaqHtml, map[string]*bintree{}},
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"layout.html": &bintree{templatesLayoutHtml, map[string]*bintree{}},
		"projects.html": &bintree{templatesProjectsHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
